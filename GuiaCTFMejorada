#!/usr/bin/env python3
"""
Gu√≠a Interactiva CTF - Capture The Flag
Una herramienta educativa para aprender ciberseguridad paso a paso
"""

import os
import sys
import subprocess
import time
import json
import base64
import hashlib
import requests
from urllib.parse import urlparse
import socket

class CTFGuide:
    def __init__(self):
        self.current_step = 0
        self.completed_steps = []
        self.tools_installed = {}
        
    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self):
        print("=" * 60)
        print("üèÅ GU√çA INTERACTIVA CTF - CAPTURE THE FLAG üèÅ")
        print("=" * 60)
        print()
    
    def print_step(self, step_num, title, description):
        print(f"\nüìã PASO {step_num}: {title}")
        print("-" * 50)
        print(f"üìù {description}")
        print()
    
    def wait_for_user(self):
        input("Presiona Enter para continuar...")
    
    def check_tool_installed(self, tool_name, command):
        """Verifica si una herramienta est√° instalada"""
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                self.tools_installed[tool_name] = True
                return True
            else:
                self.tools_installed[tool_name] = False
                return False
        except:
            self.tools_installed[tool_name] = False
            return False
    
    def install_tool(self, tool_name, install_command):
        """Instala una herramienta"""
        print(f"üîß Instalando {tool_name}...")
        print(f"Comando: {install_command}")
        
        choice = input("¬øDeseas ejecutar este comando? (s/n): ")
        if choice.lower() == 's':
            try:
                subprocess.run(install_command, shell=True, check=True)
                print(f"‚úÖ {tool_name} instalado correctamente")
                self.tools_installed[tool_name] = True
            except subprocess.CalledProcessError:
                print(f"‚ùå Error al instalar {tool_name}")
                self.tools_installed[tool_name] = False
        else:
            print(f"‚ö†Ô∏è  Instalaci√≥n de {tool_name} omitida")
    
    def step_1_introduction(self):
        """Introducci√≥n a CTF"""
        self.print_step(1, "INTRODUCCI√ìN A CTF", 
                       "Los CTF son competencias de ciberseguridad donde resuelves desaf√≠os para encontrar 'flags'")
        
        print("üéØ TIPOS DE CTF:")
        print("‚Ä¢ Jeopardy: Categor√≠as independientes (Web, Crypto, Forensics, etc.)")
        print("‚Ä¢ Attack/Defense: Equipos atacan y defienden sistemas")
        print("‚Ä¢ Mixed: Combinaci√≥n de ambos tipos")
        print()
        
        print("üèÜ CATEGOR√çAS PRINCIPALES:")
        categories = {
            "Web": "Vulnerabilidades en aplicaciones web",
            "Cryptography": "Criptograf√≠a y cifrado",
            "Forensics": "An√°lisis forense digital",
            "Binary Exploitation": "Explotaci√≥n de binarios",
            "Reverse Engineering": "Ingenier√≠a inversa",
            "Steganography": "Informaci√≥n oculta en archivos",
            "Network": "An√°lisis de tr√°fico de red",
            "OSINT": "Inteligencia de fuentes abiertas"
        }
        
        for category, description in categories.items():
            print(f"  {category}: {description}")
        
        print()
        self.wait_for_user()
    
    def step_2_environment_setup(self):
        """Configuraci√≥n del entorno"""
        self.print_step(2, "CONFIGURACI√ìN DEL ENTORNO", 
                       "Instalaci√≥n de herramientas esenciales para CTF")
        
        # Lista de herramientas esenciales
        tools = {
            "nmap": {
                "check": "nmap --version",
                "install": "sudo apt update && sudo apt install nmap",
                "description": "Esc√°ner de puertos y redes"
            },
            "netcat": {
                "check": "nc -h",
                "install": "sudo apt install netcat-traditional",
                "description": "Herramienta de red vers√°til"
            },
            "curl": {
                "check": "curl --version",
                "install": "sudo apt install curl",
                "description": "Cliente HTTP/HTTPS"
            },
            "wget": {
                "check": "wget --version",
                "install": "sudo apt install wget",
                "description": "Descargador de archivos"
            },
            "john": {
                "check": "john --version",
                "install": "sudo apt install john",
                "description": "Cracker de contrase√±as"
            },
            "hashcat": {
                "check": "hashcat --version",
                "install": "sudo apt install hashcat",
                "description": "Cracker de hashes avanzado"
            },
            "binwalk": {
                "check": "binwalk --help",
                "install": "sudo apt install binwalk",
                "description": "An√°lisis de firmware y archivos"
            },
            "strings": {
                "check": "strings --version",
                "install": "sudo apt install binutils",
                "description": "Extrae strings de archivos binarios"
            },
            "file": {
                "check": "file --version",
                "install": "sudo apt install file",
                "description": "Identifica tipos de archivo"
            },
            "hexdump": {
                "check": "hexdump -C /dev/null",
                "install": "sudo apt install bsdmainutils",
                "description": "Visor hexadecimal"
            }
        }
        
        print("üîç VERIFICANDO HERRAMIENTAS INSTALADAS:")
        for tool, info in tools.items():
            installed = self.check_tool_installed(tool, info["check"])
            status = "‚úÖ" if installed else "‚ùå"
            print(f"{status} {tool}: {info['description']}")
        
        print("\nüõ†Ô∏è  INSTALACI√ìN DE HERRAMIENTAS:")
        for tool, info in tools.items():
            if not self.tools_installed.get(tool, False):
                print(f"\n{tool}: {info['description']}")
                choice = input(f"¬øInstalar {tool}? (s/n): ")
                if choice.lower() == 's':
                    self.install_tool(tool, info["install"])
        
        print("\nüìö HERRAMIENTAS ADICIONALES RECOMENDADAS:")
        additional_tools = [
            "Burp Suite Community - Proxy web para testing",
            "Wireshark - An√°lisis de tr√°fico de red",
            "Ghidra - Ingenier√≠a inversa (NSA)",
            "Volatility - An√°lisis forense de memoria",
            "Autopsy - An√°lisis forense digital",
            "Steghide - Esteganograf√≠a",
            "Exiftool - An√°lisis de metadatos"
        ]
        
        for tool in additional_tools:
            print(f"‚Ä¢ {tool}")
        
        self.wait_for_user()
    
    def step_3_reconnaissance(self):
        """T√©cnicas de reconocimiento"""
        self.print_step(3, "RECONOCIMIENTO", 
                       "T√©cnicas para recopilar informaci√≥n sobre el objetivo")
        
        print("üîç RECONOCIMIENTO PASIVO:")
        print("‚Ä¢ OSINT (Open Source Intelligence)")
        print("‚Ä¢ B√∫squeda en Google Dorks")
        print("‚Ä¢ An√°lisis de DNS")
        print("‚Ä¢ Redes sociales")
        print()
        
        print("üéØ RECONOCIMIENTO ACTIVO:")
        print("‚Ä¢ Escaneo de puertos")
        print("‚Ä¢ Enumeraci√≥n de servicios")
        print("‚Ä¢ Fingerprinting")
        print()
        
        print("üìã COMANDOS √öTILES:")
        commands = [
            ("nmap -sS -sV -O target.com", "Escaneo SYN con detecci√≥n de versiones y OS"),
            ("nmap -sU target.com", "Escaneo UDP"),
            ("nmap --script vuln target.com", "Escaneo de vulnerabilidades"),
            ("dig target.com", "Consulta DNS"),
            ("whois target.com", "Informaci√≥n de dominio"),
            ("curl -I http://target.com", "Headers HTTP"),
            ("nc -nv target.com 80", "Conexi√≥n manual con netcat")
        ]
        
        for cmd, desc in commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        # Ejemplo pr√°ctico
        print("üß™ EJEMPLO PR√ÅCTICO:")
        target = input("Ingresa un dominio para analizar (ej: example.com): ")
        if target:
            print(f"\nüîç Analizando {target}...")
            
            # DNS lookup
            try:
                import socket
                ip = socket.gethostbyname(target)
                print(f"IP: {ip}")
            except:
                print("No se pudo resolver el DNS")
            
            # HTTP headers
            try:
                import requests
                response = requests.head(f"http://{target}", timeout=5)
                print(f"Status: {response.status_code}")
                print("Headers importantes:")
                for header in ['Server', 'X-Powered-By', 'X-Framework']:
                    if header in response.headers:
                        print(f"  {header}: {response.headers[header]}")
            except:
                print("No se pudo conectar via HTTP")
        
        self.wait_for_user()
    
    def step_4_web_challenges(self):
        """Desaf√≠os web"""
        self.print_step(4, "DESAF√çOS WEB", 
                       "T√©cnicas para explotar vulnerabilidades web")
        
        print("üåê VULNERABILIDADES WEB COMUNES:")
        vulns = {
            "SQL Injection": "Inyecci√≥n de c√≥digo SQL en consultas",
            "XSS": "Cross-Site Scripting",
            "CSRF": "Cross-Site Request Forgery",
            "Directory Traversal": "Acceso a archivos del sistema",
            "Command Injection": "Ejecuci√≥n de comandos del sistema",
            "File Upload": "Subida de archivos maliciosos",
            "Authentication Bypass": "Saltarse autenticaci√≥n",
            "Session Hijacking": "Robo de sesiones"
        }
        
        for vuln, desc in vulns.items():
            print(f"‚Ä¢ {vuln}: {desc}")
        
        print("\nüõ†Ô∏è  HERRAMIENTAS WEB:")
        print("‚Ä¢ curl - Cliente HTTP de l√≠nea de comandos")
        print("‚Ä¢ Burp Suite - Proxy interceptor")
        print("‚Ä¢ sqlmap - Automatizaci√≥n de SQL injection")
        print("‚Ä¢ dirb/dirbuster - B√∫squeda de directorios")
        print("‚Ä¢ nikto - Esc√°ner de vulnerabilidades web")
        print()
        
        print("üìã COMANDOS √öTILES:")
        web_commands = [
            ("curl -X POST -d 'user=admin&pass=123' http://target.com/login", "POST request"),
            ("curl -H 'Cookie: session=abc123' http://target.com", "Request con cookies"),
            ("curl -A 'Mozilla/5.0' http://target.com", "Cambiar User-Agent"),
            ("sqlmap -u 'http://target.com/page?id=1' --dbs", "SQL injection automatizado"),
            ("dirb http://target.com /usr/share/dirb/wordlists/common.txt", "B√∫squeda de directorios"),
            ("nikto -h http://target.com", "Escaneo de vulnerabilidades web")
        ]
        
        for cmd, desc in web_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        # Ejemplo de SQL injection
        print("üß™ EJEMPLO: SQL INJECTION")
        print("Payload com√∫n: ' OR '1'='1' --")
        print("URL: http://target.com/login?user=admin&pass=' OR '1'='1' --")
        print("Resultado: Bypassa la autenticaci√≥n")
        print()
        
        # Ejemplo de XSS
        print("üß™ EJEMPLO: XSS")
        print("Payload: <script>alert('XSS')</script>")
        print("Contexto: Campo de comentarios o b√∫squeda")
        print("Resultado: Ejecuci√≥n de JavaScript")
        
        self.wait_for_user()
    
    def step_5_cryptography(self):
        """Desaf√≠os de criptograf√≠a"""
        self.print_step(5, "CRIPTOGRAF√çA", 
                       "T√©cnicas para resolver desaf√≠os de cifrado")
        
        print("üîê TIPOS DE CIFRADO:")
        crypto_types = {
            "C√©sar": "Rotaci√≥n de caracteres",
            "Base64": "Codificaci√≥n de datos",
            "ROT13": "Rotaci√≥n espec√≠fica de 13 posiciones",
            "Vigen√®re": "Cifrado polialfab√©tico",
            "RSA": "Criptograf√≠a asim√©trica",
            "AES": "Cifrado sim√©trico avanzado",
            "MD5/SHA": "Funciones hash"
        }
        
        for cipher, desc in crypto_types.items():
            print(f"‚Ä¢ {cipher}: {desc}")
        
        print("\nüõ†Ô∏è  HERRAMIENTAS CRYPTO:")
        print("‚Ä¢ hashcat - Cracking de hashes")
        print("‚Ä¢ john - John the Ripper")
        print("‚Ä¢ openssl - Operaciones criptogr√°ficas")
        print("‚Ä¢ CyberChef - Herramienta web para decodificar")
        print("‚Ä¢ hash-identifier - Identificar tipos de hash")
        print()
        
        print("üìã COMANDOS √öTILES:")
        crypto_commands = [
            ("echo 'dGVzdA==' | base64 -d", "Decodificar Base64"),
            ("echo 'hello' | tr 'a-z' 'n-za-m'", "ROT13 manual"),
            ("hashcat -m 0 hash.txt wordlist.txt", "Crackear MD5"),
            ("john --wordlist=rockyou.txt hash.txt", "Crackear con John"),
            ("openssl enc -aes-256-cbc -d -in file.enc -out file.txt", "Descifrar AES"),
            ("echo -n 'text' | md5sum", "Generar hash MD5"),
            ("echo -n 'text' | sha256sum", "Generar hash SHA256")
        ]
        
        for cmd, desc in crypto_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        # Ejemplos pr√°cticos
        print("üß™ EJEMPLO PR√ÅCTICO: CIFRADO C√âSAR")
        text = input("Ingresa texto para cifrar con C√©sar (ROT13): ")
        if text:
            # ROT13 implementation
            result = ""
            for char in text:
                if char.isalpha():
                    shift = 13
                    if char.islower():
                        result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
                    else:
                        result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
                else:
                    result += char
            print(f"Resultado ROT13: {result}")
        
        print("\nüß™ EJEMPLO: BASE64")
        text = input("Ingresa texto para codificar en Base64: ")
        if text:
            import base64
            encoded = base64.b64encode(text.encode()).decode()
            print(f"Base64: {encoded}")
            decoded = base64.b64decode(encoded).decode()
            print(f"Decodificado: {decoded}")
        
        self.wait_for_user()
    
    def step_6_forensics(self):
        """An√°lisis forense"""
        self.print_step(6, "AN√ÅLISIS FORENSE", 
                       "T√©cnicas para analizar archivos y encontrar evidencia")
        
        print("üîç AN√ÅLISIS FORENSE:")
        print("‚Ä¢ An√°lisis de archivos")
        print("‚Ä¢ Recuperaci√≥n de datos")
        print("‚Ä¢ An√°lisis de memoria")
        print("‚Ä¢ An√°lisis de red")
        print("‚Ä¢ Metadatos")
        print()
        
        print("üõ†Ô∏è  HERRAMIENTAS FORENSES:")
        forensic_tools = [
            "file - Identificar tipo de archivo",
            "strings - Extraer strings de binarios",
            "hexdump - Visualizar contenido hexadecimal",
            "binwalk - Analizar firmware y archivos",
            "exiftool - An√°lisis de metadatos",
            "steghide - Esteganograf√≠a",
            "volatility - An√°lisis de memoria",
            "autopsy - Suite forense completa"
        ]
        
        for tool in forensic_tools:
            print(f"‚Ä¢ {tool}")
        
        print("\nüìã COMANDOS √öTILES:")
        forensic_commands = [
            ("file archivo.bin", "Identificar tipo de archivo"),
            ("strings archivo.bin | grep flag", "Buscar strings con 'flag'"),
            ("hexdump -C archivo.bin | head -20", "Ver contenido hexadecimal"),
            ("binwalk archivo.bin", "Analizar estructura del archivo"),
            ("exiftool imagen.jpg", "Ver metadatos de imagen"),
            ("steghide info imagen.jpg", "Verificar esteganograf√≠a"),
            ("dd if=archivo.bin of=extraido.bin bs=1 skip=1024 count=2048", "Extraer porci√≥n de archivo"),
            ("foremost archivo.bin", "Recuperar archivos embedded")
        ]
        
        for cmd, desc in forensic_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        print("üß™ EJEMPLO: AN√ÅLISIS DE ARCHIVO")
        print("Supongamos que tienes un archivo sospechoso...")
        print("1. file archivo.bin          # Identificar tipo")
        print("2. strings archivo.bin       # Buscar texto")
        print("3. hexdump -C archivo.bin    # Ver en hexadecimal")
        print("4. binwalk archivo.bin       # Analizar estructura")
        print()
        
        print("üïµÔ∏è  ESTEGANOGRAF√çA:")
        print("‚Ä¢ Informaci√≥n oculta en im√°genes")
        print("‚Ä¢ LSB (Least Significant Bit)")
        print("‚Ä¢ Archivos dentro de archivos")
        print("‚Ä¢ Canales de color RGB")
        print()
        
        print("Comandos esteganograf√≠a:")
        stego_commands = [
            ("steghide embed -cf imagen.jpg -ef secreto.txt", "Ocultar archivo"),
            ("steghide extract -sf imagen.jpg", "Extraer archivo oculto"),
            ("zsteg imagen.png", "Buscar datos ocultos en PNG"),
            ("stegsolve imagen.jpg", "An√°lisis visual de esteganograf√≠a")
        ]
        
        for cmd, desc in stego_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
        
        self.wait_for_user()
    
    def step_7_network_analysis(self):
        """An√°lisis de red"""
        self.print_step(7, "AN√ÅLISIS DE RED", 
                       "T√©cnicas para analizar tr√°fico y protocolos de red")
        
        print("üåê AN√ÅLISIS DE RED:")
        print("‚Ä¢ Captura de paquetes")
        print("‚Ä¢ An√°lisis de protocolos")
        print("‚Ä¢ Detecci√≥n de intrusiones")
        print("‚Ä¢ Forense de red")
        print()
        
        print("üõ†Ô∏è  HERRAMIENTAS DE RED:")
        network_tools = [
            "wireshark - Analizador de protocolos gr√°fico",
            "tcpdump - Captura de paquetes en CLI",
            "nmap - Esc√°ner de redes",
            "netstat - Estad√≠sticas de red",
            "ss - Informaci√≥n de sockets",
            "iftop - Monitor de ancho de banda",
            "ettercap - Suite de seguridad de red"
        ]
        
        for tool in network_tools:
            print(f"‚Ä¢ {tool}")
        
        print("\nüìã COMANDOS DE RED:")
        network_commands = [
            ("tcpdump -i eth0 -w captura.pcap", "Capturar tr√°fico"),
            ("tcpdump -r captura.pcap 'host 192.168.1.1'", "Filtrar por host"),
            ("nmap -sn 192.168.1.0/24", "Escanear red local"),
            ("netstat -tulnp", "Puertos abiertos"),
            ("ss -tulnp", "Sockets activos"),
            ("iftop -i eth0", "Monitor de tr√°fico"),
            ("tcpdump -r file.pcap -A | grep -i password", "Buscar contrase√±as")
        ]
        
        for cmd, desc in network_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        print("üîç AN√ÅLISIS WIRESHARK:")
        print("Filtros √∫tiles:")
        wireshark_filters = [
            "http.request.method == GET",
            "tcp.port == 80",
            "ip.addr == 192.168.1.1",
            "dns.qry.name contains 'evil'",
            "tcp contains 'password'",
            "http.response.code == 200",
            "ftp.request.command == 'PASS'"
        ]
        
        for filter_expr in wireshark_filters:
            print(f"‚Ä¢ {filter_expr}")
        
        print("\nüß™ EJEMPLO: AN√ÅLISIS DE PCAP")
        print("1. Abrir archivo PCAP en Wireshark")
        print("2. Aplicar filtros para encontrar tr√°fico interesante")
        print("3. Seguir streams TCP/UDP")
        print("4. Exportar objetos (archivos transferidos)")
        print("5. Buscar credenciales en texto plano")
        
        self.wait_for_user()
    
    def step_8_binary_exploitation(self):
        """Explotaci√≥n de binarios"""
        self.print_step(8, "EXPLOTACI√ìN DE BINARIOS", 
                       "T√©cnicas para explotar vulnerabilidades en programas")
        
        print("üíª EXPLOTACI√ìN DE BINARIOS:")
        print("‚Ä¢ Buffer overflow")
        print("‚Ä¢ Format string bugs")
        print("‚Ä¢ Use after free")
        print("‚Ä¢ Integer overflow")
        print("‚Ä¢ ROP/JOP chains")
        print()
        
        print("üõ†Ô∏è  HERRAMIENTAS BINARIAS:")
        binary_tools = [
            "gdb - Debugger",
            "objdump - An√°lisis de binarios",
            "readelf - Informaci√≥n de ELF",
            "ltrace - Trace de llamadas a librer√≠as",
            "strace - Trace de system calls",
            "peda - Plugin de GDB",
            "checksec - Verificar protecciones"
        ]
        
        for tool in binary_tools:
            print(f"‚Ä¢ {tool}")
        
        print("\nüìã COMANDOS BINARIOS:")
        binary_commands = [
            ("file binario", "Informaci√≥n del ejecutable"),
            ("checksec binario", "Verificar protecciones"),
            ("objdump -d binario", "Desensamblado"),
            ("strings binario", "Strings en el binario"),
            ("ltrace ./binario", "Trace de llamadas"),
            ("strace ./binario", "Trace de syscalls"),
            ("gdb ./binario", "Debugger"),
            ("readelf -h binario", "Header ELF")
        ]
        
        for cmd, desc in binary_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        print("üîß COMANDOS GDB:")
        gdb_commands = [
            "run - Ejecutar programa",
            "break main - Breakpoint en main",
            "info registers - Ver registros",
            "x/20x $esp - Examinar stack",
            "disas main - Desensamblar funci√≥n",
            "continue - Continuar ejecuci√≥n",
            "step - Paso a paso",
            "print $eax - Valor de registro"
        ]
        
        for cmd in gdb_commands:
            print(f"‚Ä¢ {cmd}")
        
        print("\nüß™ EJEMPLO: BUFFER OVERFLOW")
        print("1. Identificar vulnerabilidad")
        print("2. Controlar EIP/RIP")
        print("3. Encontrar offset exacto")
        print("4. Desarrollar exploit")
        print("5. Bypasses de protecciones")
        
        print("\n‚ö†Ô∏è  NOTA: Esta es una introducci√≥n b√°sica.")
        print("La explotaci√≥n de binarios requiere conocimientos avanzados.")
        
        self.wait_for_user()
    
    def step_9_osint(self):
        """OSINT - Inteligencia de fuentes abiertas"""
        self.print_step(9, "OSINT - INTELIGENCIA DE FUENTES ABIERTAS", 
                       "T√©cnicas para recopilar informaci√≥n de fuentes p√∫blicas")
        
        print("üîç OSINT (Open Source Intelligence):")
        print("‚Ä¢ B√∫squeda en motores de b√∫squeda")
        print("‚Ä¢ Redes sociales")
        print("‚Ä¢ Registros p√∫blicos")
        print("‚Ä¢ Bases de datos")
        print("‚Ä¢ Metadatos")
        print()
        
        print("üõ†Ô∏è  HERRAMIENTAS OSINT:")
        osint_tools = [
            "Google Dorking - B√∫squedas avanzadas",
            "Shodan - Motor de b√∫squeda de dispositivos",
            "Maltego - An√°lisis de v√≠nculos",
            "theHarvester - Recolecci√≥n de emails",
            "Recon-ng - Framework de reconocimiento",
            "SpiderFoot - Automatizaci√≥n OSINT",
            "Wayback Machine - Versiones hist√≥ricas"
        ]
        
        for tool in osint_tools:
            print(f"‚Ä¢ {tool}")
        
        print("\nüìã GOOGLE DORKS:")
        google_dorks = [
            'site:target.com filetype:pdf',
            'inurl:admin site:target.com',
            'intitle:"index of" site:target.com',
            'cache:target.com',
            '"password" filetype:txt site:target.com',
            'inurl:wp-admin site:target.com',
            'intitle:"login" site:target.com'
        ]
        
        for dork in google_dorks:
            print(f"‚Ä¢ {dork}")
        
        print("\nüåê COMANDOS OSINT:")
        osint_commands = [
            ("theharvester -d target.com -b google", "Buscar emails"),
            ("shodan search 'apache 2.4'", "Buscar servidores Apache"),
            ("whois target.com", "Informaci√≥n de dominio"),
            ("dig target.com any", "Registros DNS"),
            ("nslookup target.com", "Resoluci√≥n DNS"),
            ("curl -s 'https://crt.sh/?q=target.com&output=json'", "Certificados SSL"),
            ("waybackurls target.com", "URLs hist√≥ricas")
        ]
        
        for cmd, desc in osint_commands:
            print(f"  {cmd}")
            print(f"  ‚îî‚îÄ {desc}")
            print()
        
        print("üß™ EJEMPLO: RECONOCIMIENTO DE DOMINIO")
        domain = input("Ingresa un dominio para reconocimiento OSINT: ")
        if domain:
            print(f"\nüîç Analizando {domain}...")
            
            # Whois lookup
            try:
                result = subprocess.run(f"whois {domain}", 
                                      shell=True, capture_output=True, text=True)
                if result.returncode == 0:
                    lines = result.stdout.split('\n')[:5]
                    for line in lines:
                        if line.strip():
                            print(f"  {line}")
            except:
                print("  No se pudo obtener informaci√≥n whois")
            
            # DNS lookup
            try:
                import socket
                ip = socket.gethostbyname(domain)
                print(f"  IP: {ip}")
            except:
                print("  No se pudo resolver DNS")
        
        print("\n‚ö†Ô∏è  √âTICA EN OSINT:")
        print("‚Ä¢ Usar solo fuentes p√∫blicas")
        print("‚Ä¢ Respetar t√©rminos de servicio")
        print("‚Ä¢ No realizar actividades ilegales")
        print("‚Ä¢ Documentar fuentes")
        
        self.wait_for_user()
    
    def step_10_practice_platforms(self):
        """Plataformas de pr√°ctica"""
        self.print_step(10, "PLATAFORMAS DE PR√ÅCTICA", 
                       "Sitios web y plataformas para practicar CTF")
        
        print("üèÜ PLATAFORMAS CTF PERMANENTES:")
        platforms = [
            "OverTheWire - Wargames cl√°sicos",
            "HackTheBox - M√°quinas virtuales",
            "TryHackMe - Aprendizaje guiado",
            "VulnHub - VMs descargables",
            "PicoCTF - CTF educativo",
            "CTFtime - Calendario de CTFs",
            "CyberDefenders - Blue team",
            "Root-Me - M√∫ltiples categor√≠as"
        ]
        
        for platform in platforms:
            print(f"‚Ä¢ {platform}")
        
        print("\nüéØ SITIOS DE PR√ÅCTICA ESPEC√çFICOS:")
        specific_sites = {
            "Web": ["DVWA", "WebGoat", "bWAPP", "Mutillidae"],
            "Crypto": ["CryptoPals", "MysteryTwister", "CryptoHack"],
            "Forensics": ["Digital Forensics Framework", "Autopsy Cases"],
            "Binary": ["SmashTheStack", "Exploit Education"],
            "Network": ["Malware Traffic Analysis", "PacketTotal"]
        }
        
        for category, sites in specific_sites.items():
            print(f"{category}:")
            for site in sites:
                print(f"  ‚Ä¢ {site}")
        
        print("\nüèÖ COMPETENCIAS CTF FAMOSAS:")
        competitions = [
            "DEFCON CTF - La competencia m√°s prestigiosa",
            "Google CTF - Competencia anual de Google",
            "PlaidCTF - Organizada por PPP",
            "TokyoWesterns CTF - Competencia japonesa",
            "CSAW CTF - Competencia estudiantil",
            "BSides CTF - Competencias locales",
            "Pwn2Own - Competencia de 0-days"
        ]
        
        for comp in competitions:
            print(f"‚Ä¢ {comp}")
        
        print("\nüìö RECURSOS DE APRENDIZAJE:")
        resources = [
            "CTF Field Guide - Gu√≠a completa",
            "CTF Wiki - Wikipedia de CTF",
            "LiveOverflow YouTube - Videos educativos",
            "IppSec YouTube - Walkthroughs HackTheBox",
            "John Hammond YouTube - CTF writeups",
            "CTFlearn - Plataforma de aprendizaje",
            "Cybrary - Cursos online gratuitos"
        ]
        
        for resource in resources:
            print(f"‚Ä¢ {resource}")
        
        print("\nüõ†Ô∏è DISTRIBUCIONES ESPECIALIZADAS:")
        distributions = [
            "Kali Linux - Distribuci√≥n de pentesting",
            "Parrot Security OS - Alternativa a Kali",
            "BackBox - Distribuci√≥n de seguridad",
            "BlackArch - Basada en Arch Linux",
            "Pentoo - Basada en Gentoo",
            "DEFT - Digital Evidence & Forensics Toolkit"
        ]
        
        for distro in distributions:
            print(f"‚Ä¢ {distro}")
        
        self.wait_for_user()
    
    def step_11_writeups_documentation(self):
        """Documentaci√≥n y writeups"""
        self.print_step(11, "WRITEUPS Y DOCUMENTACI√ìN", 
                       "C√≥mo documentar y compartir soluciones de CTF")
        
        print("üìù ESTRUCTURA DE UN WRITEUP:")
        print("1. T√≠tulo del challenge")
        print("2. Categor√≠a y dificultad")
        print("3. Descripci√≥n del problema")
        print("4. An√°lisis inicial")
        print("5. Proceso de soluci√≥n")
        print("6. Exploits/scripts utilizados")
        print("7. Flag obtenida")
        print("8. Lecciones aprendidas")
        print()
        
        print("üéØ ELEMENTOS IMPORTANTES:")
        elements = [
            "Screenshots de evidencia",
            "C√≥digo fuente de exploits",
            "Comandos ejecutados",
            "Explicaci√≥n del razonamiento",
            "Referencias √∫tiles",
            "Herramientas utilizadas",
            "Tiempo invertido",
            "Dificultades encontradas"
        ]
        
        for element in elements:
            print(f"‚Ä¢ {element}")
        
        print("\nüìã HERRAMIENTAS PARA WRITEUPS:")
        writeup_tools = [
            "Markdown - Formato de texto",
            "GitHub - Repositorio de writeups",
            "Obsidian - Notas interconectadas",
            "Notion - Documentaci√≥n colaborativa",
            "Jupyter Notebook - C√≥digo y documentaci√≥n",
            "Asciinema - Grabaci√≥n de terminal",
            "Flameshot - Screenshots",
            "OBS Studio - Grabaci√≥n de video"
        ]
        
        for tool in writeup_tools:
            print(f"‚Ä¢ {tool}")
        
        print("\nüîç PLANTILLA DE WRITEUP:")
        template = """
# Challenge Name
**Categor√≠a:** Web/Crypto/Forensics/etc.
**Dificultad:** Easy/Medium/Hard
**Puntos:** 100

## Descripci√≥n
Descripci√≥n del challenge...

## An√°lisis Inicial
Primeras observaciones...

## Soluci√≥n
### Paso 1: Reconocimiento
```bash
comando1
comando2
```

### Paso 2: Explotaci√≥n
```python
# C√≥digo del exploit
```

### Paso 3: Obtenci√≥n del flag
```
flag{ejemplo_flag}
```

## Conclusi√≥n
Lecciones aprendidas...

## Referencias
- Link1
- Link2
        """
        
        print(template)
        
        print("\nüí° CONSEJOS PARA WRITEUPS:")
        tips = [
            "S√© claro y conciso",
            "Incluye todos los pasos",
            "Explica el 'por qu√©', no solo el 'c√≥mo'",
            "Usa formato markdown",
            "Incluye c√≥digo funcional",
            "Agrega screenshots relevantes",
            "Revisa antes de publicar",
            "Respeta las reglas del CTF"
        ]
        
        for tip in tips:
            print(f"‚Ä¢ {tip}")
        
        self.wait_for_user()
    
    def step_12_team_collaboration(self):
        """Colaboraci√≥n en equipo"""
        self.print_step(12, "COLABORACI√ìN EN EQUIPO", 
                       "Estrategias para trabajar efectivamente en equipo")
        
        print("üë• ROLES EN UN EQUIPO CTF:")
        roles = {
            "Web Expert": "Especialista en vulnerabilidades web",
            "Crypto Specialist": "Experto en criptograf√≠a",
            "Forensics Analyst": "Analista forense",
            "Binary Exploiter": "Especialista en explotaci√≥n",
            "Network Analyst": "Experto en redes",
            "OSINT Specialist": "Especialista en inteligencia",
            "Team Leader": "Coordinador del equipo",
            "Generalist": "Conocimientos amplios"
        }
        
        for role, description in roles.items():
            print(f"‚Ä¢ {role}: {description}")
        
        print("\nüõ†Ô∏è HERRAMIENTAS DE COLABORACI√ìN:")
        collab_tools = [
            "Discord/Slack - Comunicaci√≥n en tiempo real",
            "GitHub/GitLab - Compartir c√≥digo y writeups",
            "Google Docs - Documentaci√≥n colaborativa",
            "Trello/Notion - Gesti√≥n de tareas",
            "Screen sharing - Compartir pantalla",
            "Etherpad - Notas colaborativas",
            "Miro/Mural - Pizarra digital",
            "Zoom/Teams - Videoconferencias"
        ]
        
        for tool in collab_tools:
            print(f"‚Ä¢ {tool}")
        
        print("\nüìã ESTRATEGIAS DE EQUIPO:")
        strategies = [
            "Dividir challenges por especialidad",
            "Comunicaci√≥n constante",
            "Documentar todo el proceso",
            "Rotar entre diferentes challenges",
            "Ayuda mutua en challenges dif√≠ciles",
            "Revisi√≥n cruzada de soluciones",
            "Gesti√≥n del tiempo efectiva",
            "Celebrar los √©xitos juntos"
        ]
        
        for strategy in strategies:
            print(f"‚Ä¢ {strategy}")
        
        print("\n‚è∞ GESTI√ìN DEL TIEMPO:")
        time_management = [
            "Priorizar challenges por puntos/dificultad",
            "Establecer l√≠mites de tiempo por challenge",
            "Alternar entre challenges bloqueados",
            "Aprovechar hints cuando sea necesario",
            "Enfocarse en categor√≠as fuertes",
            "Dejar tiempo para challenges de √∫ltimo minuto",
            "Monitorear el scoreboard regularmente"
        ]
        
        for tip in time_management:
            print(f"‚Ä¢ {tip}")
        
        print("\nüéØ COMUNICACI√ìN EFECTIVA:")
        communication = [
            "Reportar progreso regularmente",
            "Compartir findings importantes",
            "Pedir ayuda cuando sea necesario",
            "Explicar soluciones al equipo",
            "Usar canales espec√≠ficos por categor√≠a",
            "Mantener un log de actividades",
            "Celebrar peque√±os avances"
        ]
        
        for comm in communication:
            print(f"‚Ä¢ {comm}")
        
        self.wait_for_user()
    
    def main_menu(self):
        """Men√∫ principal interactivo"""
        while True:
            self.clear_screen()
            self.print_header()
            
            print("üìö MEN√ö PRINCIPAL - GU√çA CTF")
            print("=" * 40)
            
            steps = [
                "1. Introducci√≥n a CTF",
                "2. Configuraci√≥n del Entorno",
                "3. Reconocimiento",
                "4. Desaf√≠os Web",
                "5. Criptograf√≠a",
                "6. An√°lisis Forense",
                "7. An√°lisis de Red",
                "8. Explotaci√≥n de Binarios",
                "9. OSINT",
                "10. Plataformas de Pr√°ctica",
                "11. Writeups y Documentaci√≥n",
                "12. Colaboraci√≥n en Equipo",
                "13. Resumen y Recursos",
                "0. Salir"
            ]
            
            for step in steps:
                status = "‚úÖ" if any(str(i) in step for i in self.completed_steps) else "‚≠ï"
                print(f"{status} {step}")
            
            print("\n" + "=" * 40)
            choice = input("Selecciona una opci√≥n: ")
            
            if choice == "0":
                print("¬°Gracias por usar la gu√≠a CTF! üèÅ")
                break
            elif choice == "1":
                self.step_1_introduction()
                self.completed_steps.append(1)
            elif choice == "2":
                self.step_2_environment_setup()
                self.completed_steps.append(2)
            elif choice == "3":
                self.step_3_reconnaissance()
                self.completed_steps.append(3)
            elif choice == "4":
                self.step_4_web_challenges()
                self.completed_steps.append(4)
            elif choice == "5":
                self.step_5_cryptography()
                self.completed_steps.append(5)
            elif choice == "6":
                self.step_6_forensics()
                self.completed_steps.append(6)
            elif choice == "7":
                self.step_7_network_analysis()
                self.completed_steps.append(7)
            elif choice == "8":
                self.step_8_binary_exploitation()
                self.completed_steps.append(8)
            elif choice == "9":
                self.step_9_osint()
                self.completed_steps.append(9)
            elif choice == "10":
                self.step_10_practice_platforms()
                self.completed_steps.append(10)
            elif choice == "11":
                self.step_11_writeups_documentation()
                self.completed_steps.append(11)
            elif choice == "12":
                self.step_12_team_collaboration()
                self.completed_steps.append(12)
            elif choice == "13":
                self.step_13_summary()
                self.completed_steps.append(13)
            else:
                print("Opci√≥n no v√°lida. Presiona Enter para continuar...")
                input()
    
    def step_13_summary(self):
        """Resumen final y recursos"""
        self.print_step(13, "RESUMEN Y RECURSOS FINALES", 
                       "Resumen de conceptos y recursos adicionales")
        
        print("üéì RESUMEN DE CONCEPTOS CLAVE:")
        concepts = [
            "CTF = Capture The Flag - Competencias de ciberseguridad",
            "Reconocimiento es el primer paso crucial",
            "Cada categor√≠a requiere herramientas espec√≠ficas",
            "La pr√°ctica constante es esencial",
            "Documentar todo el proceso",
            "Trabajar en equipo multiplica las capacidades",
            "Aprender de writeups de otros",
            "La √©tica es fundamental en seguridad"
        ]
        
        for concept in concepts:
            print(f"‚Ä¢ {concept}")
        
        print("\nüöÄ PR√ìXIMOS PASOS:")
        next_steps = [
            "Instalar herramientas b√°sicas",
            "Registrarse en plataformas de pr√°ctica",
            "Comenzar con challenges f√°ciles",
            "Unirse a comunidades CTF",
            "Participar en competencias",
            "Crear writeups detallados",
            "Formar o unirse a un equipo",
            "Especializarse en una categor√≠a"
        ]
        
        for step in next_steps:
            print(f"‚Ä¢ {step}")
        
        print("\nüìö RECURSOS ADICIONALES:")
        additional_resources = [
            "https://ctftime.org - Calendario de CTFs",
            "https://github.com/apsdehal/awesome-ctf - Lista de recursos",
            "https://trailofbits.github.io/ctf/ - CTF Field Guide",
            "https://ctf101.org - Introducci√≥n a CTF",
            "https://picoctf.org - CTF educativo permanente",
            "https://overthewire.org/wargames/ - Wargames cl√°sicos",
            "https://hackthebox.eu - M√°quinas virtuales",
            "https://www.vulnhub.com - VMs descargables"
        ]
        
        for resource in additional_resources:
            print(f"‚Ä¢ {resource}")
        
        print("\nüèÜ COMUNIDADES Y DISCORD:")
        communities = [
            "CTFtime Discord",
            "HackTheBox Discord",
            "TryHackMe Discord",
            "InfoSec Twitter",
            "Reddit r/netsec",
            "Reddit r/AskNetsec",
            "Local BSides chapters",
            "OWASP local chapters"
        ]
        
        for community in communities:
            print(f"‚Ä¢ {community}")
        
        print("\n‚ö° COMANDOS DE REFERENCIA R√ÅPIDA:")
        quick_commands = [
            "nmap -sS -sV target.com",
            "curl -I http://target.com",
            "strings archivo.bin | grep flag",
            "file archivo.bin",
            "base64 -d archivo.b64",
            "hashcat -m 0 hash.txt wordlist.txt",
            "tcpdump -i eth0 -w capture.pcap",
            "gdb ./binario"
        ]
        
        for cmd in quick_commands:
            print(f"‚Ä¢ {cmd}")
        
        print("\nüéØ MENSAJE FINAL:")
        print("¬°Felicidades por completar la gu√≠a CTF!")
        print("Recuerda: La ciberseguridad es un campo en constante evoluci√≥n.")
        print("Mantente actualizado, practica regularmente y divi√©rtete aprendiendo.")
        print("¬°Buena suerte en tus futuras competencias CTF! üöÄ")
        
        self.wait_for_user()

def main():
    """Funci√≥n principal"""
    guide = CTFGuide()
    
    print("üèÅ Bienvenido a la Gu√≠a Interactiva CTF")
    print("Esta gu√≠a te ayudar√° a aprender Capture The Flag paso a paso")
    print()
    
    choice = input("¬øDeseas comenzar el tutorial interactivo? (s/n): ")
    
    if choice.lower() == 's':
        guide.main_menu()
    else:
        print("¬°Gracias por usar la gu√≠a CTF!")
        print("Ejecuta el programa nuevamente cuando quieras aprender CTF.")

if __name__ == "__main__":
    main()
